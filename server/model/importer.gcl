use io;
use network;
use runtime;
use util;


fn importData() {
    var reader = JsonReader::new("server/networkdatafiles/conversion/test.json").ignore_types();
    var UEbyTime = nodeIndex<int, UE>::new();
    var UEbyZone = nodeIndex<int, UE>::new();

    while(reader.available() > 0) {
        var parsedArray = reader.read() as Array;
        for(position, arrayElement in parsedArray) {
            var ran = arrayElement.get("RAN");

            var timestamp : int = ran.get("timestamp") as int;
            

            var nrCellCU = ran.get("NrCellCU");
            var nrCellDU = ran.get("NrCellDU");
            var UEjson = ran.get("UE");


            var SynchronizationSignal: SynchronizationSignal = SynchronizationSignal {
                SINR : UEjson.get("SynchronizationSignal").get("SINR") as float,
                RSRQ : UEjson.get("SynchronizationSignal").get("RSRQ") as float,
                RSRP : UEjson.get("SynchronizationSignal").get("RSRP") as int,
            };    

            var BWP: BWP = BWP {
                subCarrierSpacing : nrCellDU.get("BWP").get("SCS") as int,
                numberOfRBs : nrCellDU.get("BWP").get("PRB") as int,
            }; 

            var NRCellCU : NRCellCU = NRCellCU {
                CellLocalId : nrCellCU.get("nrCellID") as int,
            };


            var UE: UE = UE {
                synchronizationSignal:  node<SynchronizationSignal>::new(SynchronizationSignal),
                RNTI: UEjson.get("RNTI") as String,
                id: UEjson.get("id") as int,
                position: 1,
            };

            UEbyTime.set(timestamp,UE);
            println(nrCellDU);
/*
            var NRCellDU: NRCellDU = NRCellDU {
                BWP : node<BWP>::new(BWP),
                band : nrCellDU.get("band") as int,
                arfcnUL : nrCellDU.get("SSB") as int,
                nrCellDuId : nrCellDU.get("NrCellDuId") as int,
                arfcnDL : nrCellDU.get("SSB2") as int,
                nrRPCI : nrCellDU.get("PIC") as int,
                policy : nrCellDU.get("policy") as communicationType,
                ssbFrequency : nrCellDU.get("ssbFrequency") as int,
            };
*/
           // println(UEnode);

        } //
        for(time : int, UEv in UEbyTime){
            println("${time} has value ${UEv}");
        }
    }
    //ue_by_name ?= nodeIndex<String, node<UE>>::new();
    //stations_by_geo ?= nodeGeo<node<Station>>::new();
/*
    while (reader.available() > 0) {
        var currentObj = reader.read() as Map;
        println(currentObj.get("RAN"));
        
    }
    */
}
